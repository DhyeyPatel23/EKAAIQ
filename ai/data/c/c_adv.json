[
    {
        "question": "What will be the output of this code? ",
        "options": ["Error", "5", "Address of x", "Segmentation fault"],
        "answer": "option2" , 
        "image_loc": "images/c_adv/img1.png"
    },
    {
        "question": "Which of the following is correct about function pointers?",
        "options": ["They can store the address of a function", "They cannot be used with arrays", "They return the address of the function", "They are not allowed in C"],
        "answer": "option1"
    },
    {
        "question": "What is the result of the following code ? ",
        "options": ["1", "2", "3", "Error"],
        "answer": "option3" , 
        "image_loc" : "images/c_adv/img2.png"
    },
    {
        "question": "Which of the following will cause a segmentation fault?",
        "options": ["Dereferencing a NULL pointer", "Using a wild pointer", "Accessing memory beyond array bounds", "All of these"],
        "answer": "option4"
    },
    {
        "question": "What will happen when trying to reassign a string literal ?",
        "options": ["It will compile successfully", "It will throw an error", "It will cause a segmentation fault", "None of these"],
        "answer": "option1" , 
        "image_loc" : "images/c_adv/img3.png"
    },
    {
        "question": "Which of the following correctly declares a pointer to a function returning an int?",
        "options": ["int (*fptr)();", "int *fptr();", "int *(*fptr)();", "None of these"],
        "answer": "option1"
    },
    {
        "question": "What will be the result of the following code ? ",
        "options": ["True", "False", "Error", "Undefined"],
        "answer": "option2" , 
        "image_loc" : "images/c_adv/img4.png"
    },
    {
        "question": "Which of the following functions is unsafe to use and should be avoided in secure code?",
        "options": ["strcpy()", "fgets()", "strncpy()", "memcpy()"],
        "answer": "option1"
    },
    {
        "question": "What is the result of ?",
        "options": ["4", "2", "1", "0"],
        "answer": "option1" , 
        "image_loc" : "images/c_adv/img5.png"
    },
    {
        "question": "What will happen if `free()` is called twice on the same pointer?",
        "options": ["Undefined behavior", "It will free the memory twice", "It will throw an error", "The memory will not be freed"],
        "answer": "option1"
    },
    {
        "question": "What will be the result of the following code ? ",
        "options": ["5", "10", "Address of b", "Error"],
        "answer": "option2" , 
        "image_loc" : "images/c_adv/img6.png"
    },
    {
        "question": "Which of the following is a correct way to define a multi-dimensional array in C?",
        "options": ["int arr[3][2];", "int arr[2, 3];", "int arr(3, 2);", "None of these"],
        "answer": "option1"
    },
    {
        "question": "Which of the following is true for dynamic memory allocation in C?",
        "options": ["Memory is allocated at runtime", "Memory is allocated at compile-time", "Memory cannot be resized", "None of these"],
        "answer": "option1"
    },
    {
        "question": "What will the following code output ? ",
        "options": ["5", "6", "4", "None of these"],
        "answer": "option3" , 
        "image_loc" : "images/c_adv/img7.png"
    },
    {
        "question": "What is the time complexity of accessing an element in a C array?",
        "options": ["O(1)", "O(log n)", "O(n)", "O(n^2)"],
        "answer": "option1"
    },
    {
        "question": "What will be the output of the code (assuming the existence of `<=>` operator)?",
        "options": ["-1", "0", "1", "Error"],
        "answer": "option4" , 
        "image_loc" : "images/c_adv/img8.png"
    },
    {
        "question": "Which of the following is used to prevent memory leaks in C?",
        "options": ["malloc()", "free()", "calloc()", "None of these"],
        "answer": "option2"
    },
    {
        "question": "What is the purpose of the `volatile` keyword in C?",
        "options": ["To optimize the code", "To prevent the compiler from optimizing certain variables", "To declare variables as constant", "None of these"],
        "answer": "option2"
    },
    {
        "question": "Which of the following is correct about `realloc()` in C?",
        "options": ["It resizes a memory block", "It always frees the old memory", "It always allocates new memory", "It cannot resize memory blocks"],
        "answer": "option1"
    },
    {
        "question": "What will be the result of ?",
        "options": ["Segmentation fault", "5 is stored at address NULL", "Memory leak", "Error"],
        "answer": "option1" , 
        "image_loc" : "images/c_adv/img9.png"
    },
    {
        "question": "What does the following function return ? ",
        "options": ["It returns 1 each time", "It increments x on each call and returns the new value", "It throws an error", "It resets x to 0 each time"],
        "answer": "option2" , 
        "image_loc" : "images/c_adv/img10.png"
    },
    {
        "question": "Which of the following allows us to handle signals in C?",
        "options": ["setjmp()", "signal()", "longjmp()", "None of these"],
        "answer": "option2"
    },
    {
        "question": "What will happen if you attempt to access an uninitialized pointer?",
        "options": ["Undefined behavior", "It will return a random value", "It will return NULL", "It will throw an error"],
        "answer": "option1"
    },
    {
        "question": "What will the following code output ?",
        "options": ["The address of the main function", "The address of the first instruction", "Undefined", "Error"],
        "answer": "option1" , 
        "image_loc" : "images/c_adv/img11.png"
    },
    {
        "question": "What will happen if `main()` is called recursively?",
        "options": ["Stack overflow", "Infinite loop", "Program will terminate", "None of these"],
        "answer": "option1"
    },
    {
        "question": "Which of the following is used to handle errors in dynamic memory allocation?",
        "options": ["malloc() returns NULL", "calloc() throws an exception", "realloc() frees memory", "None of these"],
        "answer": "option1"
    },
    {
        "question": "What will be the output of the following code ? ",
        "options": ["0", "Segmentation fault", "Garbage value", "Error"],
        "answer": "option3" , 
        "image_loc" : "images/c_adv/img12.png"
    },
    {
        "question": "Which of the following is correct about typecasting in C?",
        "options": ["Implicit typecasting can cause data loss", "Explicit typecasting is automatic", "Implicit typecasting needs to be specified", "None of these"],
        "answer": "option1"
    },
    {
        "question": "Which of the following is not a valid storage class in C?",
        "options": ["auto", "static", "private", "register"],
        "answer": "option3"
    },
    {
        "question": "What is the output of the following code ? ",
        "options": ["10", "20", "30", "Error"],
        "answer": "option3" , 
        "image_loc" : "images/c_adv/img13.png"
    },
    {
        "question": "Which of the following function types can have a variable number of arguments?",
        "options": ["Variadic function", "Recursive function", "Static function", "Inline function"],
        "answer": "option1"
    },
    {
        "question": "What will be the output of this code ? ",
        "options": ["7", "6", "Error", "Undefined behavior"],
        "answer": "option3" , 
        "image_loc" : "images/c_adv/img14.png"
    },
    {
        "question": "Which of the following is true about `assert()` in C?",
        "options": ["It terminates the program if the condition is false", "It returns true or false", "It checks for memory leaks", "None of these"],
        "answer": "option1"
    },
    {
        "question": "Which of the following is a correct use of `typedef`?",
        "options": ["typedef int *iptr;", "typedef const", "typedef char;", "None of these"],
        "answer": "option1"
    },
    {
        "question": "What is the correct way to define a constant pointer to an int?",
        "options": ["int *const ptr;", "const int *ptr;", "int const *ptr;", "None of these"],
        "answer": "option1"
    },
    {
        "question": "Which of the following can lead to a buffer overflow?",
        "options": ["Using gets()", "Using fgets()", "Using strncpy()", "Using memset()"],
        "answer": "option1"
    },
    {
        "question": "Which of the following will cause undefined behavior in C?",
        "options": ["Dereferencing a void pointer", "Dereferencing a pointer to an invalid memory location", "Using an uninitialized variable", "None of these"],
        "answer": "option2"
    },
    {
        "question": "What is the result of ?",
        "options": ["5", "6", "7", "Error"],
        "answer": "option3" , 
        "image_loc" : "images/c_adv/img15.png"
    },
    {
        "question": "Which of the following is used to prevent concurrent access to shared memory in C?",
        "options": ["Mutex", "Pointer", "Function pointer", "None of these"],
        "answer": "option1"
    },
    {
        "question": "Which of the following is a correct syntax for pointer arithmetic?",
        "options": ["ptr++", "ptr--", "ptr = ptr + 1", "All of these"],
        "answer": "option4"
    },
    {
        "question": "What is the difference between `++*p` and `*p++`?",
        "options": ["The first increments the value pointed to by p, the second increments the pointer", "Both increment the pointer", "Both increment the value", "None of these"],
        "answer": "option1"
    },
    {
        "question": "Which of the following cannot be returned by a function in C?",
        "options": ["A pointer", "A local variable", "A global variable", "None of these"],
        "answer": "option2"
    },
    {
        "question": "What is the output of this code ? ",
        "options": ["1", "0", "5", "Error"],
        "answer": "option1" , 
        "image_loc" : "images/c_adv/img16.png"
    },
    {
        "question": "Which of the following is correct about memory alignment in C?",
        "options": ["It refers to the way data is stored in memory", "It is the number of bytes between consecutive memory addresses", "It affects performance", "All of these"],
        "answer": "option4"
    },
    {
        "question": "Which of the following statements about macros is true?",
        "options": ["They are expanded at compile-time", "They can return values", "They are a type of function", "None of these"],
        "answer": "option1"
    },
    {
        "question": "What will be the result of ?",
        "options": ["8", "4", "16", "Error"],
        "answer": "option3" , 
        "image_loc" : "images/c_adv/img17.png"
    },
    {
        "question": "Which of the following causes a stack overflow?",
        "options": ["Recursion without a base case", "Declaring large global variables", "Using malloc() excessively", "None of these"],
        "answer": "option1"
    },
    {
        "question": "What will be the output of this code ? ",
        "options": ["d", "e", "f", "Error"],
        "answer": "option2" , 
        "image_loc" : "images/c_adv/img18.png"
    },
    {
        "question": "Which of the following is the correct declaration of a function pointer for a function that takes two ints and returns a float?",
        "options": ["float (*fptr)(int, int);", "int (*fptr)(float, float);", "float fptr(int, int);", "None of these"],
        "answer": "option1"
    },
    {
        "question": "What will be the result of this code ? ",
        "options": ["ABC0", "ABC", "BCA0", "Error"],
        "answer": "option1" , 
        "image_loc" : "images/c_adv/img19.png"
    },
    {
        "question": "Which function is used to register a callback for abnormal termination of a C program?",
        "options": ["atexit()", "abort()", "signal()", "setjmp()"],
        "answer": "option1"
    },
    {
        "question": "What will happen if a program tries to `free()` memory that was never dynamically allocated?",
        "options": ["Undefined behavior", "Memory will be freed", "Compile-time error", "None of these"],
        "answer": "option1"
    },
    {
        "question": "Which of the following is used to terminate a process in C?",
        "options": ["exit()", "terminate()", "abort()", "None of these"],
        "answer": "option1"
    },
    {
        "question": "In the C standard, how is memory allocated using `malloc()` aligned?",
        "options": ["To at least the size of a pointer", "To at least 8 bytes", "It is platform-specific", "None of these"],
        "answer": "option1"
    },
    {
        "question": "Which of the following is a possible reason for a memory leak?",
        "options": ["Not freeing dynamically allocated memory", "Freeing memory twice", "Overwriting a pointer to dynamically allocated memory", "All of these"],
        "answer": "option4"
    },
    {
        "question": "What will be the result of this code ? ",
        "options": ["9", "-11", "10", "-10"],
        "answer": "option2" , 
        "image_loc" : "images/c_adv/img20.png"
    },
    {
        "question": "Which of the following can result in undefined behavior?",
        "options": ["Using a null pointer", "Freeing already freed memory", "Accessing memory beyond array bounds", "All of these"],
        "answer": "option4"
    },
    {
        "question": "What will be the output of the following code ? ",
        "options": ["1", "2", "3", "Error"],
        "answer": "option2" , 
        "image_loc" : "images/c_adv/img21.png"
    },
    {
        "question": "What is the size of an empty structure in C?",
        "options": ["0 bytes", "1 byte", "Compiler-dependent", "Undefined"],
        "answer": "option2"
    },
    {
        "question": "Which of the following best describes `extern` variables?",
        "options": ["They are global variables declared outside of any function", "They are used to declare variables defined in other files", "They are local variables that persist across function calls", "None of these"],
        "answer": "option2"
    },
    {
        "question": "Which of the following is true about the `register` keyword?",
        "options": ["It suggests to the compiler that the variable should be stored in a CPU register", "It ensures that the variable is stored in a register", "It allocates the variable in the heap", "None of these"],
        "answer": "option1"
    },
    {
        "question": "Which of the following can occur if you dereference an uninitialized pointer?",
        "options": ["Segmentation fault", "Garbage value", "Undefined behavior", "All of these"],
        "answer": "option3"
    },
    {
        "question": "What is the output of ?",
        "options": ["10", "2", "5", "Error"],
        "answer": "option1" , 
        "image_loc" : "images/c_adv/img22.png"
    },
    {
        "question": "What will be the output of this code ?",
        "options": ["A", "C", "D", "E"],
        "answer": "option3" , 
        "image_loc" : "images/c_adv/img23.png"
    },
    {
        "question": "What does the following code output ? ",
        "options": ["0", "1", "2", "Undefined"],
        "answer": "option2" , 
        "image_loc" : "images/c_adv/img24.png"
    },
    {
        "question": "Which of the following methods is used for inter-process communication in C?",
        "options": ["Pipes", "Sockets", "Shared memory", "All of these"],
        "answer": "option4"
    },
    {
        "question": "Which of the following expressions will correctly check for end-of-file (EOF) in C?",
        "options": ["feof(fp)", "ferror(fp)", "EOF(fp)", "None of these"],
        "answer": "option1"
    },
    {
        "question": "What will happen if `printf(\"%d\", 10/0);` is executed?",
        "options": ["Compile-time error", "Runtime error", "Undefined behavior", "It prints 0"],
        "answer": "option2"
    },
    {
        "question": "Which of the following is correct about static functions in C?",
        "options": ["They are local to the file in which they are declared", "They are global functions", "They can be accessed from other files", "None of these"],
        "answer": "option1"
    },
    {
        "question": "What will be the result of this code? ",
        "options": ["1", "3", "4", "Error"],
        "answer": "option3" , 
        "image_loc" : "images/c_adv/img25.png"
    }, 
    {
        "question": "What is the value of the following expression? `5 && 3 || 0 && 2;`",
        "options": ["1", "0", "2", "3"],
        "answer": "option1"
    },
    {
        "question": "What will the following code output? ",
        "options": ["11", "10", "Undefined behavior", "Error"],
        "answer": "option3" , 
        "image_loc" : "images/c_adv/img26.png"
    },
    {
        "question": "Which of the following libraries is used for memory management in C?",
        "options": ["stdlib.h", "stdio.h", "math.h", "string.h"],
        "answer": "option1"
    },
    {
        "question": "Which of the following statements is true regarding dangling pointers?",
        "options": ["They occur when a pointer is freed but still points to the same memory location", "They occur when memory is allocated but not initialized", "They occur when a pointer is declared but never used", "None of these"],
        "answer": "option1"
    },
    {
        "question": "What will happen if a signal handler function is executed during a critical section of code?",
        "options": ["It may lead to race conditions", "It will block the signal", "The signal will be ignored", "None of these"],
        "answer": "option1"
    },
    {
        "question": "What is the result of the following code ? ",
        "options": ["5", "6", "Hello", "Error"],
        "answer": "option1", 
        "image_loc" : "images/c_adv/img27.png"
    },
    {
        "question": "What will happen if you attempt to access a variable declared as `volatile` from multiple threads?",
        "options": ["Race conditions may occur", "It will prevent race conditions", "The variable cannot be accessed", "None of these"],
        "answer": "option1"
    },
    {
        "question": "What will be the output of this code ?",
        "options": ["15", "25", "Error", "Undefined behavior"],
        "answer": "option2" , 
        "image_loc" : "images/c_adv/img28.png" 
    },
    {
        "question": "Which of the following keywords is used for type qualifiers in C?",
        "options": ["const", "volatile", "restrict", "All of these"],
        "answer": "option4"
    }
]